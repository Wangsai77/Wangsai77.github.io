<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Oracle数据库命令大全（笔记收藏）</title>
      <link href="/2023/03/01/oracle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-md/"/>
      <url>/2023/03/01/oracle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-md/</url>
      
        <content type="html"><![CDATA[<p>​</p><h1 id="Oracle-日常基本命令"><a href="#Oracle-日常基本命令" class="headerlink" title="[Oracle] 日常基本命令"></a>[Oracle] 日常基本命令</h1><h2 id="1、用户与权限"><a href="#1、用户与权限" class="headerlink" title="1、用户与权限"></a>1、用户与权限</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create user 用户名 identified by 密码;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="给用户修改密码"><a href="#给用户修改密码" class="headerlink" title="给用户修改密码"></a>给用户修改密码</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter user 用户名 identified by 新密码;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="修改自己的密码"><a href="#修改自己的密码" class="headerlink" title="修改自己的密码"></a>修改自己的密码</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">password 用户名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop user 用户名 [cascade]可选参数 cascade</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>在删除用户时，注意： 如果要删除的用户，已经创建了表，那么就需要在删除的时候带一个参数 cascade; Cascade 有级联的作用</p><h3 id="给用户赋权限"><a href="#给用户赋权限" class="headerlink" title="给用户赋权限"></a>给用户赋权限</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant 权限/角色 to 用户名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="收回用户权限"><a href="#收回用户权限" class="headerlink" title="收回用户权限"></a>收回用户权限</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">revoke 权限/角色 from 用户名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="系统权限：是数据库管理相关的权限："><a href="#系统权限：是数据库管理相关的权限：" class="headerlink" title="系统权限：是数据库管理相关的权限："></a>系统权限：是数据库管理相关的权限：</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create session(登录权限)</span><br><span class="line">create table(创建表权限)</span><br><span class="line">create index(创建索引权限)</span><br><span class="line">create view(创建视图权限)</span><br><span class="line">create sequence(创建序列权限)</span><br><span class="line">create trriger(创建触发器权限)</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="connnect-角色："><a href="#connnect-角色：" class="headerlink" title="connnect 角色："></a>connnect 角色：</h4><p>是授予用户的最基本的权利，能够连接到 oralce 数据库中，并在对其他用户的表有访问权限时，做 SELECT、UPDATE、INSERTT 等操作。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Create</span> session--建立会话</span><br><span class="line"><span class="type">Alter</span> session--修改会话</span><br><span class="line"><span class="type">Create</span> view--建立视图</span><br><span class="line"><span class="type">Create</span> sequence--建立序列等权限</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="resource-角色："><a href="#resource-角色：" class="headerlink" title="resource 角色："></a>resource 角色：</h4><p>具有创建表、序列、视图等权限。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Create</span> session--建立会话</span><br><span class="line"><span class="type">Alter</span> session--修改会话</span><br><span class="line"><span class="type">Create</span> view--建立视图</span><br><span class="line"><span class="type">Create</span> sequence--建立序列等权限</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="dba-角色："><a href="#dba-角色：" class="headerlink" title="dba 角色："></a>dba 角色：</h4><p>是授予系统管理员的，拥有该角色的用户就能成为系统管理员了，它拥有所有的系统权限。</p><h2 id="2、表空间"><a href="#2、表空间" class="headerlink" title="2、表空间"></a>2、表空间</h2><h3 id="创建表空间必须使用-system-用户创建"><a href="#创建表空间必须使用-system-用户创建" class="headerlink" title="创建表空间必须使用 system 用户创建"></a>创建表空间必须使用 system 用户创建</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create tablespace hpu56（表空间名）</span><br><span class="line">datafile &#x27;<span class="type">E</span>:\datebase\hpu6.<span class="type">DBF</span>&#x27; <span class="comment">//指定指向的数据文件路径</span></span><br><span class="line">size <span class="number">5</span>m      <span class="comment">//初始化表空间大小为 5m</span></span><br><span class="line">autoextend on next <span class="number">2</span>m      <span class="comment">//自动扩展，每次扩展 2m</span></span><br><span class="line">maxsize unlimited;         <span class="comment">// unlimited最大扩展量没有限制，100M最大扩展到100M</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h3 id="创建用户指定默认表空间"><a href="#创建用户指定默认表空间" class="headerlink" title="创建用户指定默认表空间"></a>创建用户指定默认表空间</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create user 用户名 identified by 密码 <span class="keyword">default</span> tablespace 表空间名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="修改用户默认表空间："><a href="#修改用户默认表空间：" class="headerlink" title="修改用户默认表空间："></a>修改用户默认表空间：</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter user 用户名 <span class="keyword">default</span> tablespace 表空间名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="查看表空间："><a href="#查看表空间：" class="headerlink" title="查看表空间："></a>查看表空间：</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter user 用户名 <span class="keyword">default</span> tablespace 表空间名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="查看用户默认表空间："><a href="#查看用户默认表空间：" class="headerlink" title="查看用户默认表空间："></a>查看用户默认表空间：</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select username,default_tablespace from dba_users where username=&#x27;<span class="type">SCOTT</span>&#x27;;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>注意：这里的用户名 SCOTT 必须是大写</strong></p><h2 id="3、表结构的操作"><a href="#3、表结构的操作" class="headerlink" title="3、表结构的操作"></a>3、表结构的操作</h2><h3 id="创建表："><a href="#创建表：" class="headerlink" title="创建表："></a>创建表：</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table 表的名称（字段名称 <span class="number">1</span> 数据类型, 字段名称 <span class="number">2</span>  数据类型）;</span><br><span class="line"></span><br><span class="line">create table 表的名称 as select 字段名称 <span class="number">1</span>, 字段名称 <span class="number">2.</span>.. from表的名称 ;</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table 语句添加、修改或删除列的语法</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table 表的名称 add(字段名称<span class="number">1</span> 数据类型, 字段名称<span class="number">2</span>  数据类型...);</span><br><span class="line"></span><br><span class="line">alter table 表的名称 add 字段名称 数据类型;</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="修改列"><a href="#修改列" class="headerlink" title="修改列"></a>修改列</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 modify(字段名称<span class="number">1</span> 数据类型, 字段名称<span class="number">2</span>  数据类型...);</span><br><span class="line"></span><br><span class="line">alter table 表名 modify字段名称 数据类型;</span><br><span class="line"></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop(字段名称<span class="number">1</span> , 字段名称<span class="number">2</span>,...);</span><br><span class="line"></span><br><span class="line">alter table 表名 drop 字段名称;</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="修改表的名称"><a href="#修改表的名称" class="headerlink" title="修改表的名称"></a>修改表的名称</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rename 表名 to 新表名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 rename column 旧列名 to 新列名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4、约束"><a href="#4、约束" class="headerlink" title="4、约束"></a>4、约束</h2><p>约束分为： 非空（NOT NULL）约束、 唯一（<a href="https://so.csdn.net/so/search?q=UNIQUE&spm=1001.2101.3001.7020">UNIQUE</a>）约束、主键（PRIMARY KEY）约束、外键（FOREIGN KEY）约束、条件（CHECK）约束，约束存在表user_constraints中。</p><h3 id="非空（NOT-NULL）"><a href="#非空（NOT-NULL）" class="headerlink" title="非空（NOT NULL）"></a>非空（NOT NULL）</h3><h4 id="添加非空"><a href="#添加非空" class="headerlink" title="添加非空"></a>添加非空</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称 (字段名称<span class="number">1</span> 数据类型,字段名称<span class="number">2</span> 数据类型 not <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">alter table  表名 modify 字段名 not <span class="literal">null</span>;</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="删除非空"><a href="#删除非空" class="headerlink" title="删除非空"></a>删除非空</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table  表名 modify 字段名   <span class="literal">null</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="唯一（UNIQUE）"><a href="#唯一（UNIQUE）" class="headerlink" title="唯一（UNIQUE）"></a>唯一（UNIQUE）</h3><h4 id="添加修改唯一"><a href="#添加修改唯一" class="headerlink" title="添加修改唯一"></a>添加修改唯一</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称 (字段名称<span class="number">1</span> 数据类型,字段名称<span class="number">2</span> 数据类型 unique);</span><br><span class="line"></span><br><span class="line">alter table 表名 add constraint 约束名 unique (字段名称<span class="number">1</span>,字段名称<span class="number">2</span>);</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="删除唯一"><a href="#删除唯一" class="headerlink" title="删除唯一"></a>删除唯一</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table  表名 drop constratint 约束名称;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>注意：oracle 中 unique 可以为 null，而且允许多行为 null</strong></p><h3 id="主键（PRIMARY-KEY）"><a href="#主键（PRIMARY-KEY）" class="headerlink" title="主键（PRIMARY KEY）"></a>主键（PRIMARY KEY）</h3><h4 id="添加修改主键"><a href="#添加修改主键" class="headerlink" title="添加修改主键"></a>添加修改主键</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称 (字段名称<span class="number">1</span> 数据类型,字段名称<span class="number">2</span> 数据类型 primary key);</span><br><span class="line"></span><br><span class="line">create table 表名称 (字段名称<span class="number">1</span> 数据类型,字段名称<span class="number">2</span> 数据类型 , constraint 约束名primary key (字段名称<span class="number">1</span>,字段名称<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">alter table 表名 add constraint 约束名 primary key (字段名称<span class="number">1</span>,字段名称<span class="number">2</span>);</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h4 id="删除主键"><a href="#删除主键" class="headerlink" title="删除主键"></a>删除主键</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table  表名 drop primary key cascade;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>这是因为如果在两张表存在主从关系，那么在删除主要的主键约束时， 必需带上 cascade 选项</p><p>注意：每个表只能有且有一个主键约束。</p><p>特别说明 primary key 与 unique 的区别：</p><p>1、一张表可以有多个 unique(唯一)约束；</p><p>2、一张表只能有一个主键；</p><p>3、设置为主键的列不能有 null 值；</p><h3 id="外键（FOREIGN-KEY）"><a href="#外键（FOREIGN-KEY）" class="headerlink" title="外键（FOREIGN KEY）"></a>外键（FOREIGN KEY）</h3><p>外键（FOREIGN KEY）约束：用来维护从表（Child Table）和主表（Parent Table）之间的引用完整性.能够维护数据库的数据一致性，数据的完整性。防止错误的垃圾数据入库；</p><p>用于定义主表和从表之间的关系，外键约束要定义在从表上，主表则必需具有主键约束或是 unique 约束，当定义外键约束后，要求外键列数据必需在主表的主键列存在或是为 null</p><h4 id="添加修改主键-1"><a href="#添加修改主键-1" class="headerlink" title="添加修改主键"></a>添加修改主键</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称 (字段名称<span class="number">1</span> 数据类型,字段名称<span class="number">2</span> 数据类型 references 主表名称(字段名) );</span><br><span class="line"></span><br><span class="line">create table 表名称 (字段名称<span class="number">1</span> 数据类型,字段名称<span class="number">2</span> 数据类型 , constraint 约束名 foreign key (字段名称) references主表名称(字段名)));</span><br><span class="line"></span><br><span class="line">alter table 表名 add constraint 约束名  foreign key(字段名称)  references 主表名称(字段名); </span><br><span class="line"></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="删除主键-1"><a href="#删除主键-1" class="headerlink" title="删除主键"></a>删除主键</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table  表名 drop constratint 约束名称;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>特别说明：froeign key 外键的细节</p><p>1、外键指向主键列；</p><p>2、外键可以指向 unique 列；</p><p>3、建表时先建主表，再建从表；删除表先删从表，再删主表。</p><p>4、外键列属性值要与主键或 unique 列属性值的类型保持一致</p><p>5、外键列的值，必需在主键列中存在。但外键列的值允许为 null</p><h3 id="条件（CHECK）"><a href="#条件（CHECK）" class="headerlink" title="条件（CHECK）"></a>条件（CHECK）</h3><h4 id="添加修改条件"><a href="#添加修改条件" class="headerlink" title="添加修改条件"></a>添加修改条件</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称 (字段名称<span class="number">1</span> 数据类型,字段名称<span class="number">2</span> 数据类型 check (字段名称<span class="number">2</span> in (值<span class="number">1</span>,值<span class="number">2.</span>..)));</span><br><span class="line"></span><br><span class="line">alter table 表名 add constraint 约束名 check (字段名称 in  (值<span class="number">1</span>,值<span class="number">2.</span>..));</span><br><span class="line"></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="删除条件"><a href="#删除条件" class="headerlink" title="删除条件"></a>删除条件</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table  表名 drop constratint 约束名称;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>约束命名规则：</p><p>非空约束： NN_表名_列名</p><p>唯一约束： UK_表名_列名</p><p>主键约束： PK_表名</p><p>外键约束： FK_表名_列名</p><p>条件约束： CK_表名_列名</p><h4 id="显示表约束信息"><a href="#显示表约束信息" class="headerlink" title="显示表约束信息"></a>显示表约束信息</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select  *  from user_constraints  where table_name = &#x27;表名&#x27;;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="5、数据操作"><a href="#5、数据操作" class="headerlink" title="5、数据操作"></a>5、数据操作</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into  表名[(列名 [,列名 <span class="number">2.</span>..])] values(值 [,值 <span class="number">2.</span>..]);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="插入全部数据"><a href="#插入全部数据" class="headerlink" title="插入全部数据"></a>插入全部数据</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into  表名 values(值 [,值 <span class="number">2.</span>..]);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="从表中导入数据"><a href="#从表中导入数据" class="headerlink" title="从表中导入数据"></a>从表中导入数据</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into  表名 (select 值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3.</span>..from 表名<span class="number">2</span> );</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 列名=表达式 [,列名 <span class="number">2</span>=表达式 <span class="number">2</span>,...][where 条件];</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名 [where 条件表达式];</span><br><span class="line"></span><br><span class="line">删除的几种方法比较：</span><br><span class="line"></span><br><span class="line">delete from 表名;</span><br><span class="line"></span><br><span class="line">删除所有记录，表结构还在，写日志，可以恢复的，速度慢</span><br><span class="line"></span><br><span class="line">drop table 表名;</span><br><span class="line"></span><br><span class="line">删除表的结构和数据</span><br><span class="line"></span><br><span class="line">truncate table 表名;</span><br><span class="line"></span><br><span class="line">删除表中的所有记录，表结构还在，不写日志，无法找回删除的记录，速度快。</span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516</span></span><br></pre></td></tr></table></figure><h2 id="6、基本查询数据"><a href="#6、基本查询数据" class="headerlink" title="6、基本查询数据"></a>6、基本查询数据</h2><h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select [是否剔除重复数据] *|&#123;字段名(列名),字段名 <span class="number">2</span>(列名 <span class="number">2</span>),字段名 <span class="number">3</span>(列名 <span class="number">3</span>)..&#125; from 表名 [where &#123;条件&#125;];</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>注意事项：</p><p>1、select 指定查询哪些列的数据；</p><p>2、column 指定列名；</p><p>3、*代表查询所有列；</p><p>4、from 指定查询哪张表；</p><p>5、distinct 可选，指显示结果时，是否剔除重复数据；</p><p>6、where 条件。</p><h3 id="使用列的别名"><a href="#使用列的别名" class="headerlink" title="使用列的别名"></a>使用列的别名</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ename as <span class="string">&quot;姓名&quot;</span>,sal*<span class="number">13</span>+nvl(comm,<span class="number">0</span>)*<span class="number">13</span> as <span class="string">&quot;年收入&quot;</span> from emp;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>特别注意：</p><p>oracle 在使用别名时，可以用双引号或不使用或使用 as 来表明别名。但不能使用单引号。</p><h3 id="如何处理-null-值"><a href="#如何处理-null-值" class="headerlink" title="如何处理 null 值"></a>如何处理 null 值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     nvl 函数：oracle 提供的函数，是用于处理 null 值使用的。</span><br><span class="line">1</span><br><span class="line">select ename,sal*13+nvl(comm,0)*13 from emp;</span><br><span class="line">nvl(值 1,值 2) 解释：nvl 值 1 为 null 时则取值 2，值 1 不为 null 时则取值 1 原值</span><br><span class="line">12</span><br></pre></td></tr></table></figure><h3 id="如何连接字符串"><a href="#如何连接字符串" class="headerlink" title="如何连接字符串(||)"></a>如何连接字符串(||)</h3><p>在查询的时候，希望把多列内容做为一列内容返回可以使用||连接符。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ename ||&#x27;年收入&#x27;||(sal*<span class="number">13</span>+nvl(comm,<span class="number">0</span>)*<span class="number">13</span>) <span class="string">&quot;雇员的年收入&quot;</span> from emp;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>取范围内的值(between)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where sal between <span class="number">2000</span> and <span class="number">2500</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>between 是指定区间内取值，如：between 2000 and 2500，取 2000 至 2500 内的值，同时包含</p><p>2000 和 2500</p><h3 id="如何使用-like-操作符"><a href="#如何使用-like-操作符" class="headerlink" title="如何使用 like 操作符"></a>如何使用 like 操作符</h3><p>%:表示任意 0 到多个字符</p><p>_:表示任意单个字符</p><p>1）如何显示首字符为 S 的员工姓名和工资</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal from emp where ename like &#x27;<span class="type">S</span>%&#x27;;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>2）如何显示第三个字符为大写 O 的所有员工的姓名和工资</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal from emp where ename link &#x27;<span class="type">O</span>%&#x27;;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="在-where-条件中使用-in"><a href="#在-where-条件中使用-in" class="headerlink" title="在 where 条件中使用 in"></a>在 where 条件中使用 in</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where empno in(<span class="number">123</span>,<span class="number">345</span>,<span class="number">800</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>注意：in 只能放1000个值</p><p>使用 is null 的操作符</p><h3 id="在查询语句中不能使用-x3D-或者-x3D-null判断是否为空"><a href="#在查询语句中不能使用-x3D-或者-x3D-null判断是否为空" class="headerlink" title="在查询语句中不能使用&#x3D;或者!&#x3D;null判断是否为空"></a>在查询语句中不能使用&#x3D;或者!&#x3D;null判断是否为空</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where mgr is <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">select * from emp where mgr is not <span class="literal">null</span>;</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="使用逻辑操作符号"><a href="#使用逻辑操作符号" class="headerlink" title="使用逻辑操作符号"></a>使用逻辑操作符号</h3><p>查询工资高于 500 或是岗位为 manager 的雇员，同时还要满足他们的姓名首写字母为大写的 J</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where (sal&gt;<span class="number">500</span> or job=&#x27;<span class="type">MANAGER</span>&#x27;) and (ename like &#x27;<span class="type">J</span>%&#x27;);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="使用-order-by-子句"><a href="#使用-order-by-子句" class="headerlink" title="使用 order by 子句"></a>使用 order by 子句</h3><p>如何按照工资的从低到高的顺序显示雇员的信息</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from emp order by sal asc;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>注意：asc 写或不写都是升序排序即从小到大排序，desc 则是降序排序从大到小排序。</p><p>使用列的别名排序</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal*<span class="number">12</span> <span class="string">&quot;年薪&quot;</span> from emp order by <span class="string">&quot;年薪&quot;</span> asc;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>别名需要使用“”号圈中。</p><h3 id="Oracle分组查询"><a href="#Oracle分组查询" class="headerlink" title="Oracle分组查询"></a>Oracle分组查询</h3><p>在实际应用中经常需要执行复杂的数据统计，经常需要显示多张表的数据；要用到分组函数 max,min,avg,sum,count</p><h4 id="Max-min-最大最小"><a href="#Max-min-最大最小" class="headerlink" title="Max(),min()最大最小"></a>Max(),min()最大最小</h4><p>如何显示所有员工中最高工资和最低工资</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select max(sal) <span class="string">&quot;最高工资&quot;</span>,min(sal) <span class="string">&quot;最低工资&quot;</span> from emp;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>请查询最高年工资</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select max(sal*<span class="number">13</span>+nvl(comm,<span class="number">0</span>)*<span class="number">13</span>) <span class="string">&quot;最高年工资&quot;</span>,min(sal*<span class="number">13</span>+nvl(comm,<span class="number">0</span>)*<span class="number">13</span>) <span class="string">&quot;最低年工资&quot;</span> from emp;</span><br><span class="line"></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="Avg-求平均"><a href="#Avg-求平均" class="headerlink" title="Avg()求平均"></a>Avg()求平均</h4><p>显示所有员工的平均工资和工资总和</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select avg(sal) <span class="string">&quot;平均工资&quot;</span>,sum(sal) <span class="string">&quot;工资总和&quot;</span> from emp;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>特别注意：</p><p>avg(sal)不会把 sal 为 null 的行进行统计，因此我们要注意，如果为空值也考虑，则可以</p><p>SQL&gt;selec sum(sal)&#x2F;count(*) from emp;</p><h4 id="count-求总数"><a href="#count-求总数" class="headerlink" title="count(*)求总数"></a>count(*)求总数</h4><p>计算共有多少员工</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(*) <span class="string">&quot;共有员工&quot;</span> from emp;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="group-by-和-having-子句"><a href="#group-by-和-having-子句" class="headerlink" title="group by 和 having 子句"></a>group by 和 having 子句</h4><p>group by：用于对查询的结果分组统计；</p><p>having 子句：用于限制(过滤)分组显示结果</p><p>1）如何显示每个部门的平均工资和最高工资</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select avg(sal) <span class="string">&quot;平均工资&quot;</span>,max(sal) <span class="string">&quot;最高工资&quot;</span>,deptno <span class="string">&quot;部门编号&quot;</span> from emp group by deptno;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>2）显示每个部门的每种岗位的平均工资和最低工资</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select avg(sal) <span class="string">&quot;平均工资&quot;</span>,min(sal) <span class="string">&quot;最低工资&quot;</span>,job <span class="string">&quot;职位&quot;</span>,deptno <span class="string">&quot;部门编号&quot;</span> from emp group by  deptno,job order by deptno;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>对数据分组的总结：</p><p>1、分组函数(avg…)只能出现在选择列表、having、order by 子句中；</p><p>2、如果在 select 语句中同时包含有 group by&#x2F;having&#x2F;order by 那么他们的顺序是 group by&#x2F;having&#x2F;order</p><p>by；</p><p>3、在选择列中如果有列、表达式和分组函数，那么这些列和表达式必需有一个出现在 group by 子句中，否则会出错。</p><h2 id="7、Oralce函数"><a href="#7、Oralce函数" class="headerlink" title="7、Oralce函数"></a>7、Oralce函数</h2><h4 id="Ascii"><a href="#Ascii" class="headerlink" title="Ascii()"></a>Ascii()</h4><p>返回与指定的字符对应的十进制数；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ascii(&#x27;<span class="type">A</span>&#x27;) <span class="type">A</span>,ascii(&#x27;a&#x27;) a,ascii(&#x27;<span class="number">0</span>&#x27;) zero,ascii(&#x27; &#x27;) space from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="chr"><a href="#chr" class="headerlink" title="chr()"></a>chr()</h4><p>给出整数，返回对应的字符；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select chr(<span class="number">54740</span>) zhao,chr(<span class="number">65</span>) chr65 from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>连接两个字符串,与||作用相同；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select concat(&#x27;hello&#x27;,&#x27;world&#x27;) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="initcap"><a href="#initcap" class="headerlink" title="initcap()"></a>initcap()</h4><p>返回字符串并将字符串的第一个字母变成大写；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select initcap(&#x27;smith&#x27;) upp from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="instr-C1-C2-I-J"><a href="#instr-C1-C2-I-J" class="headerlink" title="instr(C1,C2,I,J)"></a>instr(C1,C2,I,J)</h4><p>在一个字符串中搜索指定的字符，返回发现指定的字符的位置；</p><p>C1 被搜索的字符串；</p><p>C2 希望搜索的字符串；</p><p>I 搜索的开始位置，默认为 1；</p><p>J 第 j 次出现的位置，默认为 1；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select instr(&#x27;oracle training&#x27;,&#x27;ra&#x27;,<span class="number">1</span>,<span class="number">2</span>) instring from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="length"><a href="#length" class="headerlink" title="length()"></a>length()</h4><p>返回字符串的长度；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ename, length(ename) , job , length(job), sal, length(to_char(sal)) from emp where ename=&#x27;<span class="type">SMITH</span>&#x27;;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="lower"><a href="#lower" class="headerlink" title="lower()"></a>lower()</h4><p>返回字符串，并将所有的字符小写；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select lower(&#x27;<span class="type">AaBbCcDd</span>&#x27;) <span class="string">&quot;lower-AaBbCcDd&quot;</span> from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="upper"><a href="#upper" class="headerlink" title="upper()"></a>upper()</h4><p>返回字符串，并将所有的字符大写；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select upper(&#x27;<span class="type">AaBbCcDd</span>&#x27;) <span class="string">&quot;upper-AaBbCcDd&quot;</span> from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="rpad-和-lpad-粘贴字符"><a href="#rpad-和-lpad-粘贴字符" class="headerlink" title="rpad 和 lpad(粘贴字符)"></a>rpad 和 lpad(粘贴字符)</h4><p>rpad 在列的右边粘贴字符 rpad(‘显示内容’或字段,显示长度,‘填充占位符’)</p><p>lpad 在列的左边粘贴字符 lpad(‘显示内容’或字段,显示长度,‘填充占位符’)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select lpad(rpad(&#x27;htf&#x27;,<span class="number">10</span>,&#x27;*&#x27;),<span class="number">17</span>,&#x27;*&#x27;) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="ltrim-和-rtrim"><a href="#ltrim-和-rtrim" class="headerlink" title="ltrim 和 rtrim"></a>ltrim 和 rtrim</h4><p>ltrim 删除左边出现的字符串 ltrim(‘原内容’或字段,‘要删除的字符串’)</p><p>rtrim 删除右边出现的字符串 rtrim(‘原内容’或字段,‘要删除的字符串’)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select rtrim(&#x27;**han teng fei**&#x27;,&#x27;*&#x27;) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="substr-string-start-count"><a href="#substr-string-start-count" class="headerlink" title="substr(string,start,count)"></a>substr(string,start,count)</h4><p>取子字符串，从 start 开始，取 count 个</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select substr(&#x27;<span class="number">13088888888</span>&#x27;,<span class="number">3</span>,<span class="number">8</span>) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="replace-‘string’-‘s1’-‘s2’"><a href="#replace-‘string’-‘s1’-‘s2’" class="headerlink" title="replace(‘string’,‘s1’,‘s2’)"></a>replace(‘string’,‘s1’,‘s2’)</h4><p>string 希望被替换的字符或变量</p><p>s1 被替换的字符串</p><p>s2 要替换的字符串</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select replace(&#x27;he love you&#x27;,&#x27;he&#x27;,&#x27;i&#x27;) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="trim-‘s’-from-‘string’"><a href="#trim-‘s’-from-‘string’" class="headerlink" title="trim(‘s’ from ‘string’)"></a>trim(‘s’ from ‘string’)</h4><p>如果不指定参数，默认为空格符。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select trim(<span class="number">0</span> from <span class="number">0009872348900</span>) <span class="string">&quot;trim example&quot;</span> from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="8、数学函数"><a href="#8、数学函数" class="headerlink" title="8、数学函数"></a>8、数学函数</h2><h4 id="ceil（向上取整）"><a href="#ceil（向上取整）" class="headerlink" title="ceil（向上取整）"></a>ceil（向上取整）</h4><p>返回大于或等于给出数字的最小整数；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ceil(<span class="number">3.14159265</span>) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="floor（向下取整）"><a href="#floor（向下取整）" class="headerlink" title="floor（向下取整）"></a>floor（向下取整）</h4><p>对给定的数字取整数；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select floor(<span class="number">2345.67</span>) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="trunc-精度截取"><a href="#trunc-精度截取" class="headerlink" title="trunc(精度截取)"></a>trunc(精度截取)</h4><p>按照指定的精度截取一个数；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select trunc(<span class="number">124.1666</span>,<span class="number">-2</span>),trunc(<span class="number">124.16666</span>,<span class="number">2</span>) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="round-和-trunk"><a href="#round-和-trunk" class="headerlink" title="round 和 trunk"></a>round 和 trunk</h4><p>按照指定的精度进行舍入；</p><p>round 函数为四舍五入</p><p>trunc（直接截取）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select round(<span class="number">55.5</span>),round(<span class="number">-55.4</span>),trunc(<span class="number">55.5</span>),trunc(<span class="number">-55.5</span>) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="abs"><a href="#abs" class="headerlink" title="abs"></a>abs</h4><p>返回指定值的绝对值；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select abs(<span class="number">100</span>),abs(<span class="number">-100</span>) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="acos"><a href="#acos" class="headerlink" title="acos"></a>acos</h4><p>给出反余弦的值；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select acos(<span class="number">-1</span>) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="asin"><a href="#asin" class="headerlink" title="asin"></a>asin</h4><p>给出反正弦的值；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select asin(<span class="number">0.5</span>) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="atan"><a href="#atan" class="headerlink" title="atan"></a>atan</h4><p>返回一个数字的反正切值；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select atan(<span class="number">1</span>) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="cos"><a href="#cos" class="headerlink" title="cos"></a>cos</h4><p>返回一个给定数字的余弦；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select cos(<span class="number">-3.14159265</span>) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="mod-n1-n2"><a href="#mod-n1-n2" class="headerlink" title="mod(n1,n2)"></a>mod(n1,n2)</h4><p>返回一个 n1 除以 n2 的余数；(取模函数)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select mod(<span class="number">10</span>,<span class="number">3</span>),mod(<span class="number">3</span>,<span class="number">3</span>),mod(<span class="number">2</span>,<span class="number">3</span>) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="9、日期函数"><a href="#9、日期函数" class="headerlink" title="9、日期函数"></a>9、日期函数</h2><p>介绍 :日期函数用于处理 date 类型的数据。</p><p>默认情况下日期格式是 dd-mon-yy 即 12-7 月-78</p><h3 id="add-months-掌握"><a href="#add-months-掌握" class="headerlink" title="add_months(掌握)"></a>add_months(掌握)</h3><p>add_months(日期值,增加(减少)值)增加或减去月份；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select to_char(add_months(to_date(&#x27;<span class="number">199912</span>&#x27;,&#x27;yyyymm&#x27;),<span class="number">2</span>),&#x27;yyyymm&#x27;) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="last-day"><a href="#last-day" class="headerlink" title="last_day"></a>last_day</h3><p>返回日期当月的最后一天；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select to_char(last_day(sysdate),&#x27;yyyy-mm-dd&#x27;) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="months-between-date2-date1"><a href="#months-between-date2-date1" class="headerlink" title="months_between(date2,date1)"></a>months_between(date2,date1)</h3><p>给出 date2-date1 的月份，共有多少个月；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select months_between(&#x27;<span class="number">19</span><span class="number">-12</span> 月<span class="number">-1999</span>&#x27;,&#x27;<span class="number">19</span><span class="number">-3</span> 月<span class="number">-1999</span>&#x27;) mon_between from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="next-day-date-‘day’"><a href="#next-day-date-‘day’" class="headerlink" title="next_day(date,‘day’)"></a>next_day(date,‘day’)</h3><p>给出日期 date 和星期 X（day）之后计算下一个星期的日期；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select next_day(&#x27;<span class="number">1</span><span class="number">-3</span> 月<span class="number">-2017</span>&#x27;,&#x27;星期五&#x27;) next_day from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Sysdate"><a href="#Sysdate" class="headerlink" title="Sysdate"></a>Sysdate</h3><p>用来得到系统的当前日期；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select to_char(sysdate,&#x27;day&#x27;) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="转换类型函数"><a href="#转换类型函数" class="headerlink" title="转换类型函数"></a>转换类型函数</h3><h4 id="to-char-date-‘format’"><a href="#to-char-date-‘format’" class="headerlink" title="to_char(date,‘format’)"></a>to_char(date,‘format’)</h4><p>日期类型转换成字符串格式(主要用于将日期以习惯的格式输出显示)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select to_char(sysdate,&#x27;yyyy/mm/dd hh24:mi:ss&#x27;) from dual;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>to_char()</p><p>特别说明： 日期格式：</p><p>yy:两位数字的年份 2004–04</p><p>yyyy:四位数字的年份 2004 年</p><p>mm:两位数字的月份 8 月–08</p><p>dd:两位数字的天数 30 号–30</p><p>hh24:二十四小时制 8 点–20</p><p>hh12:十二小时制 8 点–08 mi,ss–显示分钟\秒</p><p>day 显示星期几</p><p>month 显示几月</p><p>year 显示年</p><p>数字格式：</p><p>9:显示数字，并忽略前面 0</p><p>0:显示数字，如位数不足，则用 0 补齐</p><p>.:在指定位置显示小数点</p><p>,:在指定位置显示逗号</p><p>$:在数字前加美元符号</p><p>L:在数字前加本地货币符号</p><p>C:在数字前加国际货币符号</p><p>G:在指定位置显示组分隔符 D:在指定位置显示小数点符号(.)</p><p>说明：,逗号.和小数点可以合在一起使用，G 分隔符和 D 小数点符可以合在一起使用，但,.不能和 GD</p><p>综合使用，否则报错。</p><h4 id="to-date-string-‘format’"><a href="#to-date-string-‘format’" class="headerlink" title="to_date(string,‘format’)"></a>to_date(string,‘format’)</h4><p>将字符串转换成日期(主要用于将日期按习惯的格式输入到 oracle 数据库中)</p><h4 id="to-number"><a href="#to-number" class="headerlink" title="to_number"></a>to_number</h4><p>将给出的数字类型的字符转换为数字；</p><h2 id="10、系统函数"><a href="#10、系统函数" class="headerlink" title="10、系统函数"></a>10、系统函数</h2><p>decode 函数类似于 java 的 switch case 分支语句</p><p>decode (value, if1, then1, if2,then2, if3,then3, . . . else )</p><p>DECODE(VALUE,‘0’,‘1’,‘2’)<br> 若value为0，则为1，否则为2</p><h2 id="11、表之间的连接"><a href="#11、表之间的连接" class="headerlink" title="11、表之间的连接"></a>11、表之间的连接</h2><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>指在同一张表的连接查询(把一张表看作两张表)</p><p>显示员工的上级领导的姓名</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select e2.ename from emp e1,emp e2 where e1.mgr=e2.empno;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="内连接-inner-join-on"><a href="#内连接-inner-join-on" class="headerlink" title="内连接(inner join - on)"></a>内连接(inner join - on)</h3><p>内连接基本语法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 列名 <span class="number">1</span>,.. from 表 <span class="number">1</span> inner join 表 <span class="number">2</span> on 条件;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>说明：内连接只有两张表同时满足条件才会被查询到。</p><p>显示员工的信息和部门名称</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select e.*,d.dname from emp e,dept d where e.deptno=d.deptno;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select e.*,d.dname from emp e inner join dept d  on e.deptno=d.deptno;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="左外连接-left-join-on"><a href="#左外连接-left-join-on" class="headerlink" title="左外连接 (left join - on)"></a>左外连接 (left join - on)</h3><p>如果左侧的表完全显示我们就说是左外连接</p><p>基本语法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select 列名 <span class="number">1</span>,列名 <span class="number">2</span>,.. from 表 <span class="number">1</span> left join 表 <span class="number">2</span> on 条件;</span><br><span class="line"></span><br><span class="line">select 列名 <span class="number">1</span>,列名 <span class="number">2</span>,.. from 表 <span class="number">1</span>,表 <span class="number">2</span> where 条件 <span class="number">1</span>=条件 <span class="number">2</span>(+);</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="右外连接-right-join-on"><a href="#右外连接-right-join-on" class="headerlink" title="右外连接 (right join - on)"></a>右外连接 (right join - on)</h3><p>如果右侧的表完全显示我们就说是右外连接</p><p>基本语法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select 列名 <span class="number">1</span>,列名 <span class="number">2</span>,.. from 表 <span class="number">1</span> right join 表 <span class="number">2</span> on 条件;</span><br><span class="line"></span><br><span class="line">select 列名 <span class="number">1</span>,列名 <span class="number">2</span>,.. from 表 <span class="number">1</span>,表 <span class="number">2</span> where 条件 <span class="number">1</span>(+)=条件 <span class="number">2</span>;</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="完全外连-full-outer-join-on"><a href="#完全外连-full-outer-join-on" class="headerlink" title="完全外连 (full outer join - on)"></a>完全外连 (full outer join - on)</h3><p>完全显示两个表，没有匹配的记录置为空</p><p>基本语法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 列名 <span class="number">1</span>,列 <span class="number">2</span>,.. from 表 <span class="number">1</span> full outer join 表 <span class="number">2</span> on 条件;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="12、分页查询"><a href="#12、分页查询" class="headerlink" title="12、分页查询"></a>12、分页查询</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select t2.*  from ( select t1.*, rownum rn from (select *  from 表名) t1</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>where rownum&lt;&#x3D;大范围(取到多少条数据)) t2 where rn&gt;&#x3D;小范围(从第几条数据开始取);</p><p>特别说明：</p><p>oracle 分页查询是通过三层筛选法进行查询的。每一次都可以带 where 条件来对要查询的信息进行筛选。</p><p>第一层：构建我们所要查询字段信息并排序；</p><p>第二层：构建 rownum 别名 rn</p><p>第三层：加 where 条件，rn&gt;&#x3D;M and rn &lt;&#x3D;N</p><h3 id="oracle视图"><a href="#oracle视图" class="headerlink" title="oracle视图"></a>oracle视图</h3><h4 id="创建视图基本语法："><a href="#创建视图基本语法：" class="headerlink" title="创建视图基本语法："></a>创建视图基本语法：</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create view 视图名 as select 语句 [<span class="keyword">with</span> read only]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>特别说明：with read only 如果带上的话，只能查询，不能改写。</p><h4 id="创建或修改视图基本语法："><a href="#创建或修改视图基本语法：" class="headerlink" title="创建或修改视图基本语法："></a>创建或修改视图基本语法：</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create or replace view 视图名 as select 语句 [<span class="keyword">with</span> read only]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>特别说明：with read only 如果带上的话，只能查询，不能改写。</p><h4 id="删除视图基本语法："><a href="#删除视图基本语法：" class="headerlink" title="删除视图基本语法："></a>删除视图基本语法：</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop view 视图名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu下快速使用Oracle数据库（详解）</title>
      <link href="/2023/02/22/%E5%9C%A8Ubuntu%E4%B8%8B%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8Oracle/"/>
      <url>/2023/02/22/%E5%9C%A8Ubuntu%E4%B8%8B%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8Oracle/</url>
      
        <content type="html"><![CDATA[<p>​因为在Linux中安装oracle非常麻烦，相信每个人也会遇到各种问题，为了方便所以选择用docker安装，并做详细记录，为以后需要之时拿来再看。</p><h3 id="1、安装docker环境。"><a href="#1、安装docker环境。" class="headerlink" title="1、安装docker环境。"></a>1、安装docker环境。</h3><h3 id="2、拉取Oracle镜像。"><a href="#2、拉取Oracle镜像。" class="headerlink" title="2、拉取Oracle镜像。"></a>2、拉取Oracle镜像。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure><p>这个镜像大约6G左右</p><p><img src="https://i.328888.xyz/2023/02/22/xtIoX.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/02/22/xtIoX.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113180125853"></p><h3 id="3、查看镜像是否正确安装"><a href="#3、查看镜像是否正确安装" class="headerlink" title="3、查看镜像是否正确安装"></a>3、查看镜像是否正确安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/02/22/xtRFc.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/02/22/xtRFc.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image"></p><h3 id="4、创建Orcal的容器"><a href="#4、创建Orcal的容器" class="headerlink" title="4、创建Orcal的容器"></a>4、创建Orcal的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -p 1521:1521 --name oracle11g registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure><p> 如果创建成功能会返回容器id</p><p><img src="https://i.328888.xyz/2023/02/22/xtEoq.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/02/22/xtEoq.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="images"></p><blockquote><p>可以写成shell脚本，下次打开oracle数据库就可以一条命令创建容器。</p><p>shell脚本如下：</p><p># BEGIN ANSIBLE MANAGED BLOCK<br>#!&#x2F;bin&#x2F;bash<br>docker rm -f oracle11;<br>docker run -it -d -p 1521:1521 -v &#x2F;data&#x2F;oracle:&#x2F;data&#x2F;oracle –name  oracle11g registry.cn-hangzhou.aliyuncs.com&#x2F;helowin&#x2F;oracle_11g<br># END ANSIBLE MANAGED BLOCK</p><p>但为了保存上一次容易的配置值，是不建议写这个shell脚本的，下次打开直接用docker start oracle11命令打开。</p></blockquote><h3 id="5、镜像配置"><a href="#5、镜像配置" class="headerlink" title="5、镜像配置"></a>5、镜像配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it oracle11g bash</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlplus <span class="operator">/</span>nolog     <span class="comment">--进行软连接，发现没有该命令，所以切换root用户。</span></span><br><span class="line">su root            <span class="comment">--输入密码：helowin</span></span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/02/22/xtstU.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/02/22/xtstU.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image">    </p><ul><li>编辑profile文件配置ORACLE环境变量</li></ul><p>​      打开：vi &#x2F;etc&#x2F;profile ，在文件最后写上下面内容：</p><p>​      **export ORACLE_HOME&#x3D;&#x2F;home&#x2F;oracle&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_2 **</p><p>​      <strong>export ORACLE_SID&#x3D;helowin</strong></p><p>​     <strong>export PATH&#x3D;$ORACLE_HOME&#x2F;bin:$PATH</strong></p><ul><li><p>保存后执行source &#x2F;etc&#x2F;profile 加载环境变量；</p></li><li><p>创建软连接</p></li><li><p>&#96;&#96;&#96;bash<br>ln -s $ORACLE_HOME&#x2F;bin&#x2F;sqlplus &#x2F;usr&#x2F;bin   #创建软链接<br>su - oracle    #切换到oracle 用户</p></li></ul><p><img src="https://i.328888.xyz/2023/02/22/xtvcv.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/02/22/xtvcv.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="6、登录sqlplus并修改sys、system用户密码"><a href="#6、登录sqlplus并修改sys、system用户密码" class="headerlink" title="6、登录sqlplus并修改sys、system用户密码"></a>6、登录sqlplus并修改sys、system用户密码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sqlplus <span class="operator">/</span>nolog   <span class="comment">--登录</span></span><br><span class="line">conn <span class="operator">/</span><span class="keyword">as</span> sysdba  <span class="comment">--</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="keyword">system</span> identified <span class="keyword">by</span> <span class="keyword">system</span>;<span class="comment">--修改system用户账号密码；</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> sys identified <span class="keyword">by</span> <span class="keyword">system</span>;<span class="comment">--修改sys用户账号密码；</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> test identified <span class="keyword">by</span> test; <span class="comment">-- 创建内部管理员账号密码；</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>,resource,dba <span class="keyword">to</span> test; <span class="comment">--将dba权限授权给内部管理员账号和密码；</span></span><br><span class="line"><span class="keyword">ALTER</span> PROFILE <span class="keyword">DEFAULT</span> LIMIT PASSWORD_LIFE_TIME UNLIMITED; <span class="comment">--修改密码规则策略为密码永不过期；</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> processes<span class="operator">=</span><span class="number">1000</span> <span class="keyword">scope</span><span class="operator">=</span>spfile; <span class="comment">--修改数据库最大连接数据；</span></span><br></pre></td></tr></table></figure><h3 id="7、重启数据库"><a href="#7、重启数据库" class="headerlink" title="7、重启数据库"></a>7、重启数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conn <span class="operator">/</span><span class="keyword">as</span> sysdba</span><br><span class="line">shutdown immediate; <span class="comment">--关闭数据库</span></span><br><span class="line">startup;            <span class="comment">--启动数据库</span></span><br><span class="line"></span><br><span class="line">exit：              <span class="comment">--退出软链接</span></span><br></pre></td></tr></table></figure><h3 id="8、下次登陆可能遇到的问题"><a href="#8、下次登陆可能遇到的问题" class="headerlink" title="8、下次登陆可能遇到的问题"></a>8、下次登陆可能遇到的问题</h3><p><strong>进入docker的oracle容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it oracle11g bash</span><br></pre></td></tr></table></figure><p><strong>启动sqlplus</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlplus <span class="operator">/</span>nolog</span><br></pre></td></tr></table></figure><p>此时报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error 6 initializing SQL*Plus</span><br><span class="line">SP2-0667: Message file sp1&lt;lang&gt;.msb not found</span><br><span class="line">SP2-0750: You may need to set ORACLE_HOME to your Oracle software directory</span><br><span class="line">123</span><br></pre></td></tr></table></figure><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>在oracle容器中，重新登陆oracle用户。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - oracle</span><br></pre></td></tr></table></figure><p>重新启动sqlplus</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[oracle@6b0b62f5771d ~]$ sqlplus /nolog</span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 14:41:24 2022</span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2009, Oracle.  All rights reserved.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">SQL&gt; </span></span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/02/22/xW2dw.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/02/22/xW2dw.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>成功~</p><h3 id="9、登陆方式"><a href="#9、登陆方式" class="headerlink" title="9、登陆方式"></a>9、登陆方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker start [image_name]</span><br><span class="line">sudo  docker <span class="built_in">exec</span> -it [inage_name] bash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员必知 -- 代码规范</title>
      <link href="/2023/01/16/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E7%9F%A5%20--%20%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <url>/2023/01/16/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E7%9F%A5%20--%20%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="程序员必知-–-代码规范"><a href="#程序员必知-–-代码规范" class="headerlink" title="程序员必知 – 代码规范"></a>程序员必知 – 代码规范</h1><p>作为一个优秀的程序员，肯定希望能写出一手看起来既赏心悦目又利于理解的好代码。</p><p>要既方便日后自己回来翻阅一眼就能明白代码在干什么，又能让接手的人很快上手。</p><h4 id="首先拿两段代码比较一下："><a href="#首先拿两段代码比较一下：" class="headerlink" title="首先拿两段代码比较一下："></a>首先拿两段代码比较一下：</h4><p>Compare this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php require(&quot;admin-header.php&quot;);</span><br><span class="line">if(isset($OJ_LANG))&#123;</span><br><span class="line">require_once(&quot;../lang/$OJ_LANG.php&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$sql=&quot;&quot;;</span><br><span class="line">if(isset($_GET[&#x27;keyword&#x27;]))&#123;</span><br><span class="line">$keyword=$_GET[&#x27;keyword&#x27;];</span><br><span class="line">$keyword=&quot;%$keyword%&quot;;</span><br><span class="line">$sql=&quot;select `user_id`,`nick`,`reg_time`,`ip`,`school`,`defunct` FROM</span><br><span class="line">`users` where user_id like ? &quot;;</span><br><span class="line">$result=pdo_query($sql,$keyword);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$sql=&quot;select `user_id`,`nick`,`reg_time`,`ip`,`school`,`defunct` FROM</span><br><span class="line">`users` order by `reg_time` desc limit 100 &quot;;</span><br><span class="line">$result=pdo_query($sql);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>with this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require(&quot;admin-header.php&quot;);</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;keyword&#x27;])) &#123;</span><br><span class="line">    $keyword = &quot;%&quot; . $_GET[&#x27;keyword&#x27;] . &quot;%&quot;;</span><br><span class="line">    $sql = &quot;SELECT &quot; .</span><br><span class="line">               &quot;`user_id`, `nick`, `reg_time`, `ip`, `school`, `defunct` &quot;.</span><br><span class="line">           &quot;FROM `users` WHERE `user_id` LIKE ?&quot;;</span><br><span class="line">    $result = pdo_query($sql, $keyword);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $sql = &quot;SELECT &quot; .</span><br><span class="line">               &quot;`user_id`, `nick`, `reg_time`, `ip`, `school`, `defunct` &quot;.</span><br><span class="line">           &quot;FROM `users` ORDER BY `reg_time` DESC LIMIT 100&quot;;</span><br><span class="line">     $result = pdo_query($sql);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>比较完上面两段代码，估计大家都喜欢第二段。这就是我们所说的代码风格，代码规范。</p><p>代码气味应该在一开始就避免，而不是在之后修复。</p><h2 id="一、什么是代码规范"><a href="#一、什么是代码规范" class="headerlink" title="一、什么是代码规范"></a>一、什么是代码规范</h2><p>什么叫规范？在C语言中不遵守编译器的规定，编译器在编译时就会报错，这个规定叫作规则。但是有一种规定，它是一种人为的、约定成俗的，即使不按照那种规定也不会出错，这种规定就叫作规范。</p><p>虽然我们不按照规范也不会出错，但是那样代码写得就会很乱。大家刚开始学习C语言的时候，第一步不是说要把程序写正确，而是要写规范。因为如果你养成一种非常不好的写代码的习惯，代码就会写得乱七八糟，等到将来工作面试的时候，这样的习惯可能会让你失去机会。</p><h2 id="二、代码规范的好处"><a href="#二、代码规范的好处" class="headerlink" title="二、代码规范的好处"></a>二、代码规范的好处</h2><ul><li>在团队合作中，我们需要经常看别人的代码，别人也要读我们写的代码，如果没有统一的规范，没有变量命名规则的话，等到要整合代码的时候也够头疼的了。统一的风格使得代码可读性大大提高了，人们看到任何一段代码都会觉得异常熟悉。显然的，<strong>规范的代码在团队的合作开发中是非常有益而且必要的</strong></li><li><strong>代码规范可以大大减少对Bug处理所需要的时间。</strong>对于一些垒代码的工作，很容易出现无穷无尽的Bug，这很大程度上是因为代码不规范导致的。没有对输入输出进行规范，没有规范的异常处理和日志处理等等。这样不但会引起Bug而且还很难找出Bug。。相反，在规范的开发bug不但可以有效减少，查找bug也变得轻而易举。所以，<strong>规范不是对开发的制约，而确实是有助于提高开发效率的。</strong></li><li>由此可以看出规范的代码，可以大大提高代码可读性，进而减少维护审查成本。</li><li><strong>最重要的是写出规范的代码可以反映出程序员本身的代码水平。</strong></li></ul><h2 id="三、代码如何写才能规范"><a href="#三、代码如何写才能规范" class="headerlink" title="三、代码如何写才能规范"></a>三、代码如何写才能规范</h2><p>在一次讲座上，我有幸听了一位编程大神的代码规范分享，在这里再分享给大家。</p><p>一段赏心悦目的代码应该至少具备下面这几个特点：</p><h4 id="1、使用空行来分割逻辑"><a href="#1、使用空行来分割逻辑" class="headerlink" title="1、使用空行来分割逻辑"></a>1、使用空行来分割逻辑</h4><p>即使在一个方法里面的代码，逻辑也是分成一小块一小块的，这个时候我们在这些逻辑中间加上空行，就能告诉别人，我这个代码这里，两个空行中间的代码关联比较大。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">tsm_open_file_Click</span><span class="params">(object sender, EventArgs e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>.Text = <span class="string">&quot;数字签名工具 - 添加文件中，请稍候...&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (recordList.Count &gt; <span class="number">20</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;最多支持20个文件一次性签名。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//空行</span></span><br><span class="line">    <span class="type">OpenFileDialog</span> <span class="variable">openFileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenFileDialog</span>();</span><br><span class="line">    openFileDialog.Filter = <span class="string">&quot;程序文件|*.exe;*.dll|可执行文件|*.exe|动态链接库|*.dll&quot;</span>;</span><br><span class="line">    openFileDialog.RestoreDirectory = <span class="literal">true</span>;</span><br><span class="line">    openFileDialog.FilterIndex = <span class="number">1</span>;</span><br><span class="line">    openFileDialog.Multiselect = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//空行</span></span><br><span class="line">    <span class="keyword">if</span> (openFileDialog.ShowDialog() == DialogResult.OK)</span><br><span class="line">    &#123;</span><br><span class="line">        String[] fileNames = openFileDialog.FileNames;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fileNames.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">oldPath</span> <span class="operator">=</span> fileNames[i];</span><br><span class="line"><span class="comment">//空行</span></span><br><span class="line">            <span class="keyword">if</span> (canAddFile(oldPath) == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(String.Format(<span class="string">&quot;文件&#123;0&#125;不能添加，因为已经有同名文件了。&quot;</span>, oldPath));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.Text = <span class="string">&quot;数字签名工具&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空行起着分隔程序段落的作用。空行得体将使程序的布局更加清晰。空行不会浪费内存。</p><blockquote><p>规则一：定义变量后要空行。尽可能在定义变量的同时初始化该变量，即遵循就近原则。如果变量的引用和定义相隔比较远，那么变量的初始化就很容易被忘    记。若引用了未被初始化的变量，就会导致程序出错。</p><p>规则二：每个函数定义结束之后都要加空行。</p><p>总规则：两个相对独立的程序块、变量说明之后必须要加空行。比如上面几行代码完成的是一个功能，下面几行代码完成的是另一个功能，那么它们中间就要加空行。这样看起来更清晰。</p></blockquote><h4 id="2、缩进和对齐"><a href="#2、缩进和对齐" class="headerlink" title="2、缩进和对齐"></a>2、缩进和对齐</h4><p>缩进是通过键盘上的 Tab 键实现的，缩进可以使程序更有层次感。</p><p>对齐主要是针对大括号<code>&#123;&#125;</code>说的：</p><blockquote><p>缩进原则：如果地位相等，则不需要缩进；如果属于某一个代码的内部代码就需要缩进。</p><p>对齐规则一：<code>&#123;</code>和<code>&#125;</code>分别都要独占一行。互为一对的<code>&#123;</code>和<code>&#125;</code>要位于同一列，并且与引用它们的语句左对齐。</p><p>对齐规则二：<code>&#123;&#125;</code>之内的代码要向内缩进一个 Tab，且同一地位的要左对齐，地位不同的继续缩进。</p></blockquote><p>此外编程软件还有“对齐、缩进修正”功能。就是按 Ctrl+A 全选，然后按 Alt+F8，这时程序中所有成对的大括号都会自动对齐，未缩进的也会自动缩进。大家可以在养成写完代码后然后按 Alt+F8的习惯。</p><h4 id="3、空格"><a href="#3、空格" class="headerlink" title="3、空格"></a>3、空格</h4><p>空格是影响代码外观最重要的因素，大家可以在规范的代码里发现空格无处不在。</p><blockquote><p>规则一： 赋值运算符、关系运算符、算术运算符、逻辑运算符、位运算符，如  &#x3D;、&#x3D;&#x3D;、！&#x3D;、+&#x3D;、－&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;、&gt;&gt;&#x3D;、&lt;&lt;&#x3D;、&amp;&#x3D;、^&#x3D;、|&#x3D;、&gt;、&lt;&#x3D;、&gt;、     &gt;&#x3D;、+、－、*、&#x2F;、%、&amp;、|、&amp;&amp;、||、&lt;&lt;、&gt;&gt;、^ 等双目运算符的前后应当加空格。</p><p>规则二：对于表达式比较长的 for 语句和 if 语句，为了紧凑起见，可以适当地去掉一些空格。但 for 和 if 后面紧跟的空格不可以删，其后面的语句可以根据语句的长度适当地去掉一些空格，<code>=</code>和<code>&lt;</code>前后的空格可去掉。例如：<code>for (i=0; i&lt;10; i++)</code></p></blockquote><h4 id="4、不要用中文拼音做变量名"><a href="#4、不要用中文拼音做变量名" class="headerlink" title="4、不要用中文拼音做变量名"></a>4、不要用中文拼音做变量名</h4><p>现在C#和Java都支持中文变量名，类名。可以试着玩一玩，但是真的不要用到项目中，不只是说中文，还有中文拼音。使用有意义的英文作为变量名更有利于沟通，和外国人沟通方便，和中国人沟通也方便。曾经看到有人设计数据库，字段名全部使用中文拼音缩写，令人费解，而且非常别扭，大概只有自己能看懂吧。</p><p>英文变量名也不要用a，b，c，d作为变量名，<strong>使用有意义的单词全称一眼就知道这个变量</strong>，这个类是做什么用的。大家都很忙，没时间猜来猜去。</p><h4 id="5、注释要清晰优雅高效"><a href="#5、注释要清晰优雅高效" class="headerlink" title="5、注释要清晰优雅高效"></a>5、注释要清晰优雅高效</h4><p>敲完代码后随手加上的简短的几个字，会提高看代码的效率好多倍。</p><p>当你焦头烂额的猜测原来编码的人是怎么想的时候，看到下面添加了注释的代码，是不是有一种谢天谢地的感觉。</p><p>C语言中一行注释一般采用<code>//…</code>，多行注释必须采用<code>/*…*/</code>。注释通常用于重要的代码行或段落提示。在一般情况下，源程序有效注释量必须在 20% 以上。</p><blockquote><p> 规则一：边写代码边注释，修改代码的同时要修改相应的注释，以保证注释与代码的一致性，不再有用的注释要删除。</p><p> 规则二：当代码比较长，特别是有多重嵌套的时候，应当在段落的结束处加注释，这样便于阅读。</p><p> 规则三：每一条宏定义的右边必须要有注释，说明其作用。</p></blockquote><h4 id="6、多写代码，多思考"><a href="#6、多写代码，多思考" class="headerlink" title="6、多写代码，多思考"></a>6、多写代码，多思考</h4><p>单纯地读完一遍肯定没什么感觉，没关系，要想把代码写规范不是一朝一夕的事，这应该是一种习惯，需要不停地敲、不停的积累。</p><p>刚开始的时候多模仿，照着规范写就行了，以后在写代码的时候，情不自禁地就会按规范的方式书写了。</p><h2 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h2><p>更多具体的语言代码规范可以参考<a href="https://developer.aliyun.com/article/850913">《2021最新阿里代码规范（前端篇）》</a></p><p>多写代码，多思考；多喝热水，多锻炼。</p>]]></content>
      
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 综合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速入门Git（Git命令大全）</title>
      <link href="/2023/01/14/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Git/"/>
      <url>/2023/01/14/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Git/</url>
      
        <content type="html"><![CDATA[<h1 id="快速入门Git（Git命令大全）"><a href="#快速入门Git（Git命令大全）" class="headerlink" title="快速入门Git（Git命令大全）"></a>快速入门Git（Git命令大全）</h1><p>Git是当下最流行的一种版本控制（Revision control）器是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li>实现跨区域多人协同开发</li><li>追踪和记载一个或者多个文件的历史记录</li><li>组织和保护你的源代码和文档</li><li>统计工作量</li><li>并行开发、提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p>简单说就是用于管理多人协同开发项目的技术。</p><h2 id="一、Git环境安装"><a href="#一、Git环境安装" class="headerlink" title="一、Git环境安装"></a>一、Git环境安装</h2><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h3><h5 id="Windows-平台上安装"><a href="#Windows-平台上安装" class="headerlink" title="Windows 平台上安装"></a>Windows 平台上安装</h5><p>在 Windows 平台上安装 Git 同样轻松，无脑安装，下一步下一步即可。</p><p>安装包下载地址：<a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p><blockquote><p>下载慢的话都可以找国内的镜像</p></blockquote><p>官网慢，可以用国内的镜像：<a href="https://npm.taobao.org/mirrors/git-for-windows/%E3%80%82">https://npm.taobao.org/mirrors/git-for-windows/。</a></p><h4 id="Debian-x2F-Ubuntu-Git-安装命令为："><a href="#Debian-x2F-Ubuntu-Git-安装命令为：" class="headerlink" title="Debian&#x2F;Ubuntu Git 安装命令为："></a>Debian&#x2F;Ubuntu Git 安装命令为：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \</span><br><span class="line">  libz-dev libssl-dev</span><br><span class="line"></span><br><span class="line">$ apt-get install git</span><br><span class="line"></span><br><span class="line">$ git --version</span><br><span class="line">git version 1.8.1.2</span><br></pre></td></tr></table></figure><h4 id="如果你使用的系统是-Centos-x2F-RedHat-安装命令为："><a href="#如果你使用的系统是-Centos-x2F-RedHat-安装命令为：" class="headerlink" title="如果你使用的系统是 Centos&#x2F;RedHat 安装命令为："></a>如果你使用的系统是 Centos&#x2F;RedHat 安装命令为：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ yum install curl-devel expat-devel gettext-devel \</span><br><span class="line">  openssl-devel zlib-devel</span><br><span class="line"></span><br><span class="line">$ yum -y install git-core</span><br><span class="line"></span><br><span class="line">$ git --version</span><br><span class="line">git version 1.7.1</span><br></pre></td></tr></table></figure><h3 id="2-配置用户信息"><a href="#2-配置用户信息" class="headerlink" title="2.配置用户信息"></a>2.配置用户信息</h3><p>配置个人的用户名称和电子邮件地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;runoob&quot;</span></span><br><span class="line">$ git config --global user.email <span class="built_in">test</span>@runoob.com</span><br></pre></td></tr></table></figure><p>要检查已有的配置信息，可以使用 git config –list 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config -l</span><br><span class="line">user.email=725519278@qq.com</span><br><span class="line">user.name=Alexander798798</span><br></pre></td></tr></table></figure><h2 id="二、Git基本原理（核心）"><a href="#二、Git基本原理（核心）" class="headerlink" title="二、Git基本原理（核心）"></a>二、Git基本原理（核心）</h2><h3 id="1-三个区域"><a href="#1-三个区域" class="headerlink" title="1.三个区域"></a>1.三个区域</h3><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。</p><p>如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><ul><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index &#x2F; Stage：暂存区，用于临时存放你的改动，<strong>事实上它只是一个文件</strong>，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换（github、gitte）</li></ul><p><img src="https://i.328888.xyz/2023/01/14/wuLWo.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/14/wuLWo.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230114220043509"></p><ul><li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li><li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li><li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li><li>Index&#x2F;Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复WorkSpace中的临时状态。</li></ul><h3 id="2-Git-工作流程"><a href="#2-Git-工作流程" class="headerlink" title="2.Git 工作流程"></a>2.Git 工作流程</h3><ul><li><p>git的工作流程一般是这样的：</p><p>１、在工作目录中添加、修改文件；</p><p>２、将需要进行版本管理的文件放入暂存区域； <code>git add .</code> </p><blockquote><p>git add .   代表把所有文件都add进去</p></blockquote><p>３、将暂存区域的文件提交到git仓库（本地）。<code>git commit</code></p><p>4、 将本地仓库的文件提交到git远程仓库。<code>git push</code></p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p09iaOhl0dACfLrMwNbDzucGQ30s3HnsiaczfcR6dC9OehicuwibKuHjRlzg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload placeholder" data-srcset="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p09iaOhl0dACfLrMwNbDzucGQ30s3HnsiaczfcR6dC9OehicuwibKuHjRlzg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Image"></p></li></ul><h3 id="3、日常使用只要记住下图6个命令："><a href="#3、日常使用只要记住下图6个命令：" class="headerlink" title="3、日常使用只要记住下图6个命令："></a>3、日常使用只要记住下图6个命令：</h3><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p0AII6YVooUzibpibzJnoOHHXUsL3f9DqA4horUibfcpEZ88Oyf2gQQNR6w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload placeholder" data-srcset="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p0AII6YVooUzibpibzJnoOHHXUsL3f9DqA4horUibfcpEZ88Oyf2gQQNR6w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Image"></p><h2 id="三-Git-创建项目"><a href="#三-Git-创建项目" class="headerlink" title="三.Git 创建项目"></a>三.Git 创建项目</h2><p><strong>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</strong></p><h3 id="1、本地仓库搭建"><a href="#1、本地仓库搭建" class="headerlink" title="1、本地仓库搭建"></a>1、本地仓库搭建</h3><p>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p><h3 id="2、克隆远程仓库"><a href="#2、克隆远程仓库" class="headerlink" title="2、克隆远程仓库"></a>2、克隆远程仓库</h3><p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]  </span><br></pre></td></tr></table></figure><h2 id="四、Git文件状态"><a href="#四、Git文件状态" class="headerlink" title="四、Git文件状态"></a>四、Git文件状态</h2><h3 id="1、文件的四种状态（重点）"><a href="#1、文件的四种状态（重点）" class="headerlink" title="1、文件的四种状态（重点）"></a>1、文件的四种状态（重点）</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li><li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li><li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git  checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li><li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li></ul><h3 id="2、查看文件状态"><a href="#2、查看文件状态" class="headerlink" title="2、查看文件状态"></a>2、查看文件状态</h3><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status [filename]      <span class="comment">#查看指定文件状态</span></span><br><span class="line">git status                 <span class="comment">#查看所有文件状态</span></span><br><span class="line">git add .                  <span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;消息内容&quot;</span>     <span class="comment"># 提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br></pre></td></tr></table></figure><h3 id="3、忽略不需要的文件"><a href="#3、忽略不需要的文件" class="headerlink" title="3、忽略不需要的文件"></a>3、忽略不需要的文件</h3><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">*.txt        <span class="comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span><br><span class="line">!lib.txt     <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp        <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/       <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt    <span class="comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure><h2 id="五、GIT分支"><a href="#五、GIT分支" class="headerlink" title="五、GIT分支"></a>五、GIT分支</h2><h3 id="1、git分支中常用指令："><a href="#1、git分支中常用指令：" class="headerlink" title="1、git分支中常用指令："></a>1、git分支中常用指令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p><p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p><h2 id="附：Git命令大全"><a href="#附：Git命令大全" class="headerlink" title="附：Git命令大全"></a>附：Git命令大全</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">git init                                                  <span class="comment"># 初始化本地git仓库（创建新仓库）</span></span><br><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span>                       <span class="comment"># 配置用户名</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@xxx.com&quot;</span>              <span class="comment"># 配置邮件</span></span><br><span class="line">git config --global color.ui <span class="literal">true</span>                         <span class="comment"># git status等命令自动着色</span></span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy                    <span class="comment"># remove  proxy configuration on git</span></span><br><span class="line">git <span class="built_in">clone</span> git+ssh://git@192.168.53.168/VT.git             <span class="comment"># clone远程仓库</span></span><br><span class="line">git status                                                <span class="comment"># 查看当前版本状态（是否修改）</span></span><br><span class="line">git add xyz                                               <span class="comment"># 添加xyz文件至index</span></span><br><span class="line">git add .                                                 <span class="comment"># 增加当前子目录下所有更改过的文件至index</span></span><br><span class="line">git commit -m <span class="string">&#x27;xxx&#x27;</span>                                       <span class="comment"># 提交</span></span><br><span class="line">git commit --amend -m <span class="string">&#x27;xxx&#x27;</span>                               <span class="comment"># 合并上一次提交（用于反复修改）</span></span><br><span class="line">git commit -am <span class="string">&#x27;xxx&#x27;</span>                                      <span class="comment"># 将add和commit合为一步</span></span><br><span class="line">git <span class="built_in">rm</span> xxx                                                <span class="comment"># 删除index中的文件</span></span><br><span class="line">git <span class="built_in">rm</span> -r *                                               <span class="comment"># 递归删除</span></span><br><span class="line">git <span class="built_in">log</span>                                                   <span class="comment"># 显示提交日志</span></span><br><span class="line">git <span class="built_in">log</span> -1                                                <span class="comment"># 显示1行日志 -n为n行</span></span><br><span class="line">git <span class="built_in">log</span> -5</span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>                                            <span class="comment"># 显示提交日志及相关变动文件</span></span><br><span class="line">git <span class="built_in">log</span> -p -m</span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         <span class="comment"># 显示某个提交的详细内容</span></span><br><span class="line">git show dfb02                                            <span class="comment"># 可只用commitid的前几位</span></span><br><span class="line">git show HEAD                                             <span class="comment"># 显示HEAD提交日志</span></span><br><span class="line">git show HEAD^                                            <span class="comment"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span></span><br><span class="line">git tag                                                   <span class="comment"># 显示已存在的tag</span></span><br><span class="line">git tag -a v2.0 -m <span class="string">&#x27;xxx&#x27;</span>                                  <span class="comment"># 增加v2.0的tag</span></span><br><span class="line">git show v2.0                                             <span class="comment"># 显示v2.0的日志及详细内容</span></span><br><span class="line">git <span class="built_in">log</span> v2.0                                              <span class="comment"># 显示v2.0的日志</span></span><br><span class="line">git diff                                                  <span class="comment"># 显示所有未添加至index的变更</span></span><br><span class="line">git diff --cached                                         <span class="comment"># 显示所有已添加index但还未commit的变更</span></span><br><span class="line">git diff HEAD^                                            <span class="comment"># 比较与上一个版本的差异</span></span><br><span class="line">git diff HEAD -- ./lib                                    <span class="comment"># 比较与HEAD版本lib目录的差异</span></span><br><span class="line">git diff origin/master..master                            <span class="comment"># 比较远程分支master上有本地分支master上没有的</span></span><br><span class="line">git diff origin/master..master --<span class="built_in">stat</span>                     <span class="comment"># 只显示差异的文件，不显示具体内容</span></span><br><span class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git <span class="comment"># 增加远程定义（用于push/pull/fetch）</span></span><br><span class="line">git branch                                                <span class="comment"># 显示本地分支</span></span><br><span class="line">git branch --contains 50089                               <span class="comment"># 显示包含提交50089的分支</span></span><br><span class="line">git branch -a                                             <span class="comment"># 显示所有分支</span></span><br><span class="line">git branch -r                                             <span class="comment"># 显示所有原创分支</span></span><br><span class="line">git branch --merged                                       <span class="comment"># 显示所有已合并到当前分支的分支</span></span><br><span class="line">git branch --no-merged                                    <span class="comment"># 显示所有未合并到当前分支的分支</span></span><br><span class="line">git branch -m master master_copy                          <span class="comment"># 本地分支改名</span></span><br><span class="line">git checkout -b master_copy                               <span class="comment"># 从当前分支创建新分支master_copy并检出</span></span><br><span class="line">git checkout -b master master_copy                        <span class="comment"># 上面的完整版</span></span><br><span class="line">git checkout features/performance                         <span class="comment"># 检出已存在的features/performance分支</span></span><br><span class="line">git checkout --track hotfixes/BJVEP933                    <span class="comment"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span></span><br><span class="line">git checkout v2.0                                         <span class="comment"># 检出版本v2.0</span></span><br><span class="line">git checkout -b devel origin/develop                      <span class="comment"># 从远程分支develop创建新本地分支devel并检出</span></span><br><span class="line">git checkout -- README                                    <span class="comment"># 检出head版本的README文件（可用于修改错误回退）</span></span><br><span class="line">git merge origin/master                                   <span class="comment"># 合并远程master分支至当前分支</span></span><br><span class="line">git cherry-pick ff44785404a8e                             <span class="comment"># 合并提交ff44785404a8e的修改</span></span><br><span class="line">git push origin master                                    <span class="comment"># 将当前分支push到远程master分支</span></span><br><span class="line">git push origin :hotfixes/BJVEP933                        <span class="comment"># 删除远程仓库的hotfixes/BJVEP933分支</span></span><br><span class="line">git push --tags                                           <span class="comment"># 把所有tag推送到远程仓库</span></span><br><span class="line">git fetch                                                 <span class="comment"># 获取所有远程分支（不更新本地分支，另需merge）</span></span><br><span class="line">git fetch --prune                                         <span class="comment"># 获取所有原创分支并清除服务器上已删掉的分支</span></span><br><span class="line">git pull origin master                                    <span class="comment"># 获取远程分支master并merge到当前分支</span></span><br><span class="line">git <span class="built_in">mv</span> README README2                                     <span class="comment"># 重命名文件README为README2</span></span><br><span class="line">git reset --hard HEAD                                     <span class="comment"># 将当前版本重置为HEAD（通常用于merge失败回退）</span></span><br><span class="line">git rebase</span><br><span class="line">git branch -d hotfixes/BJVEP933                           <span class="comment"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span></span><br><span class="line">git branch -D hotfixes/BJVEP933                           <span class="comment"># 强制删除分支hotfixes/BJVEP933</span></span><br><span class="line">git ls-files                                              <span class="comment"># 列出git index包含的文件</span></span><br><span class="line">git show-branch                                           <span class="comment"># 图示当前分支历史</span></span><br><span class="line">git show-branch --all                                     <span class="comment"># 图示所有分支历史</span></span><br><span class="line">git whatchanged                                           <span class="comment"># 显示提交历史对应的文件修改</span></span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       <span class="comment"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span></span><br><span class="line">git ls-tree HEAD                                          <span class="comment"># 内部命令：显示某个git对象</span></span><br><span class="line">git rev-parse v2.0                                        <span class="comment"># 内部命令：显示某个ref对于的SHA1 HASH</span></span><br><span class="line">git reflog                                                <span class="comment"># 显示所有提交，包括孤立节点</span></span><br><span class="line">git show HEAD@&#123;5&#125;</span><br><span class="line">git show master@&#123;yesterday&#125;                               <span class="comment"># 显示master分支昨天的状态</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">&#x27;%h %s&#x27;</span> --graph                   <span class="comment"># 图示提交日志</span></span><br><span class="line">git show HEAD~3</span><br><span class="line">git show -s --pretty=raw 2be7fcb476</span><br><span class="line">git stash                                                 <span class="comment"># 暂存当前修改，将所有至为HEAD状态</span></span><br><span class="line">git stash list                                            <span class="comment"># 查看所有暂存</span></span><br><span class="line">git stash show -p stash@&#123;0&#125;                               <span class="comment"># 参考第一次暂存</span></span><br><span class="line">git stash apply stash@&#123;0&#125;                                 <span class="comment"># 应用第一次暂存</span></span><br><span class="line">git grep <span class="string">&quot;delete from&quot;</span>                                    <span class="comment"># 文件中搜索文本“delete from”</span></span><br><span class="line">git grep -e <span class="string">&#x27;#define&#x27;</span> --and -e SORT_DIRENT</span><br><span class="line">git gc</span><br><span class="line">git fsck</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu下用Hexo和github搭建个人博客（详解）</title>
      <link href="/2023/01/13/%E5%9C%A8Ubuntu%E4%B8%8B%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89-1/"/>
      <url>/2023/01/13/%E5%9C%A8Ubuntu%E4%B8%8B%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89-1/</url>
      
        <content type="html"><![CDATA[<h1 id="在Ubuntu下用Hexo和github搭建个人博客（详解）"><a href="#在Ubuntu下用Hexo和github搭建个人博客（详解）" class="headerlink" title="在Ubuntu下用Hexo和github搭建个人博客（详解）"></a>在Ubuntu下用Hexo和github搭建个人博客（详解）</h1><p>用Hexo和github配合，不用写代码就搭建一套属于自己的个人博客网站（小白也可以尝试）</p><p>Hero还提供了大量主题模版供用户下载。你的博客网站将可以时不时的换一种主题风格，赏心悦目，简直完美！</p><p>（一个属于你的世界！一个可供别人访问的个人世界）</p><blockquote><p>Hexo是一个基于 node.js的快速生成静态博客的开源框架,支持 Markdown和大多数 Octopress<br>插件,一个命令即可部署到 Github页面、 Giteee、 Heroku等,强大的APl,可无限扩展,拥有<br>数百个主题和插件。</p></blockquote><h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><p>​因为环境我已经安装过了，所以图片展示安装完成的结果。</p><h4 id="1-安装-node-js"><a href="#1-安装-node-js" class="headerlink" title="1.安装 node.js"></a>1.安装 node.js</h4><p><code>sudo apt-get install nodejs</code></p><p><img src="https://i.328888.xyz/2023/01/13/wcQFU.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wcQFU.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113180125853"></p><blockquote><p>使用apt按装方式可能不会安装nodejs的最新版，如需要用最新版可以到官网下载。</p></blockquote><h4 id="2-安装-git"><a href="#2-安装-git" class="headerlink" title="2.安装 git"></a>2.安装 git</h4><p><code>sudo apt-get install git-core</code></p><p><img src="https://i.328888.xyz/2023/01/13/wcYQv.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wcYQv.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113180424353"></p><h4 id="3-安装-npm"><a href="#3-安装-npm" class="headerlink" title="3.安装 npm"></a>3.安装 npm</h4><p><code>sudo apt-get install npm</code></p><p><img src="https://i.328888.xyz/2023/01/13/wmZxy.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmZxy.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113180611556"></p><h4 id="4-安装-Hexo"><a href="#4-安装-Hexo" class="headerlink" title="4.安装 Hexo"></a>4.安装 Hexo</h4><p><code>sudo npm install -g hexo-cli</code></p><h4 id="5-检查安装是否正确"><a href="#5-检查安装是否正确" class="headerlink" title="5.检查安装是否正确"></a>5.检查安装是否正确</h4><h5 id="依次输入查询版本命令，若正确显示版本号则表示环境安装成功"><a href="#依次输入查询版本命令，若正确显示版本号则表示环境安装成功" class="headerlink" title="依次输入查询版本命令，若正确显示版本号则表示环境安装成功"></a>依次输入查询版本命令，若正确显示版本号则表示环境安装成功</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br><span class="line">git version</span><br><span class="line"></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/01/13/wmiL5.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmiL5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113181531919"></p><p><code>hexo -v</code></p><p><img src="https://i.328888.xyz/2023/01/13/wmycZ.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmycZ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113181553428"></p><h3 id="二、环境初始化"><a href="#二、环境初始化" class="headerlink" title="二、环境初始化"></a>二、环境初始化</h3><h4 id="1-创建本地博客目录文件夹"><a href="#1-创建本地博客目录文件夹" class="headerlink" title="1.创建本地博客目录文件夹"></a>1.创建本地博客目录文件夹</h4><p><img src="https://i.328888.xyz/2023/01/13/wm4oF.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wm4oF.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113181845598"></p><p><code>cd my_blog</code>进入文件夹，使用<code>npm install</code>命令初始化安装npm</p><p>可以看到我们的hexo站点就已经安装好了，接下来就可以直接启动他了</p><img src="https://i.328888.xyz/2023/01/13/wmUjQ.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmUjQ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113182130219" style="zoom:80%;" /><h4 id="2-启动本地服务站点"><a href="#2-启动本地服务站点" class="headerlink" title="2.启动本地服务站点"></a>2.启动本地服务站点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/01/13/wmnFE.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmnFE.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113182339740"></p><p>访问<a href="http://localhost:4000/">http://localhost:4000/</a> 至此hero就搭建好了。可以在本地访问了</p><p>下图是我更换了主题后的样式，后面会说到。</p><p><img src="https://i.328888.xyz/2023/01/13/wmtYC.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmtYC.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113182414153"></p><p>到这里我们的个人博客网站本地已经搭建完成，为了能让更多的人看到我们的网站，我们就需要将网站上传到github上。</p><blockquote><p>在国内访问github一直都不太稳定，大家遇到网络问题在所难免，多试几次。</p><p>或者不用github，改用gitte也是一样的操作，但gitee需要实名认证审核才能使用配置Pages服务。这里只说明github方法。</p></blockquote><h3 id="三、在GitHub上建站访问"><a href="#三、在GitHub上建站访问" class="headerlink" title="三、在GitHub上建站访问"></a>三、在GitHub上建站访问</h3><h4 id="1-新建guthub仓库"><a href="#1-新建guthub仓库" class="headerlink" title="1.新建guthub仓库"></a>1.新建guthub仓库</h4><p><strong>仓库名称限制了为你的：用户名+.github.io</strong></p><p>你必须要用这种格式为你的仓库命名</p><p>举例：<img src="https://i.328888.xyz/2023/01/13/wmklP.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmklP.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113185300068"></p><blockquote><p>一定要<strong>建立空仓库，不要有分支存在！！！</strong></p></blockquote><h4 id="2-安装-Hexo-上传插件"><a href="#2-安装-Hexo-上传插件" class="headerlink" title="2.安装 Hexo 上传插件"></a>2.安装 Hexo 上传插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="3、修改hexo配置文件指定仓库路径"><a href="#3、修改hexo配置文件指定仓库路径" class="headerlink" title="3、修改hexo配置文件指定仓库路径"></a>3、修改hexo配置文件指定仓库路径</h4><p>可在文件夹中直接打开文件，也可通过vim直接编辑</p><p>在博客文件夹的根目录下打开<code>_config.yml</code>,在最后修改geploy：部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml </span><br><span class="line"><span class="comment">#找到（注意空格和对齐）修改如下：</span></span><br><span class="line">deploy:  </span><br><span class="line"><span class="built_in">type</span>: git  </span><br><span class="line">repo: 你的github仓库路径  </span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/01/13/wmCMt.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmCMt.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113184855722"></p><h4 id="4、推送站点到github"><a href="#4、推送站点到github" class="headerlink" title="4、推送站点到github"></a>4、推送站点到github</h4><p>推送命令(上传报错多位网络原因，多上传几次即可)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>推送过程中需要输入你的github用户名和密码。但是在2021年8月14日开始github官方就加强安全访问。不能通过原有账号密码git访问，密码需要用官方的token或者采用ssh公私钥访问。否则会出现：鉴权失败</p><p>所以我们需要获取到自己的仓库所需要的令牌token，当作密码进行操作。</p><blockquote><p>登录github设置setting-&gt;Developer Settings-&gt;Prosonal access tokens 创建一个新token。然后就可以拿这个token当密码输入了。</p></blockquote><p><img src="https://i.328888.xyz/2023/01/13/wmwnJ.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmwnJ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113185336545"></p><p><img src="https://i.328888.xyz/2023/01/13/wm2cc.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wm2cc.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113185438815"></p><p><strong>在设置令牌时，名字随便取，期限建议直接永久，权限全选上。</strong></p><p><strong>密钥生成后保存下来，后期会频繁用到</strong></p><p>继续使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d  <span class="comment">#重新上传，上传过程中输入github的用户名和刚刚生成的密钥</span></span><br></pre></td></tr></table></figure><p>如果出现错误（没有则跳过）：<img src="https://i.328888.xyz/2023/01/13/wmHsA.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmHsA.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113190251115"></p><blockquote><p>在git创建项目时出现，<br>是因为在创建git文件夹的时候信息不完善导致的</p></blockquote><p>只需要Run</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span> <span class="comment">#注册github 的邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span> <span class="comment">#github用户名</span></span><br></pre></td></tr></table></figure><h4 id="5-推送完成尝试访问"><a href="#5-推送完成尝试访问" class="headerlink" title="5.推送完成尝试访问"></a>5.推送完成尝试访问</h4><p><img src="https://i.328888.xyz/2023/01/13/wmbfo.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmbfo.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113190708862"></p><p>输入你的仓库名称,即可访问成功。</p><p>尝试访问<a href="https://alexander798798.github.io/">https://alexander798798.github.io/</a></p><p>到这里我们的个人博客网页就算搭建完成了。下一步就是更换自己喜欢的主题和动手写第一篇自己的博客了。</p><p>感谢观看！！</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
